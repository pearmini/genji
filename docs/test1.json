{"markdown":"# Test\n\n- <a href=\"#test-code\">Test Code</a>\n  - <a href=\"#test-basic-usage\">Test Basic Usage</a>\n  - <a href=\"#test-advanced-usage\">Test Advanced Usage</a>\n- <a href=\"#test-markdown\">Test Markdown</a>\n\n## Test Codeblock\n\nThis is for codeblock in markdown.\n\n## Test Basic Usage\n\nTest pure JavaScript code: `js`, it should render a static codeblock.\n\n```js\n// pure js\n(() => {\n  const div = document.createElement(\"div\");\n  div.innerText = \"hello\";\n  div.style.background = \"red\";\n  return div;\n})();\n```\n\nTest JavaScript code with dom markup: `js | dom`, it should both render a red div with \"hello\" and a interactive codeblock.\n\n```js | dom\n(() => {\n  const div = document.createElement(\"div\");\n  div.innerText = \"hello\";\n  div.style.background = \"red\";\n  return div;\n})();\n```\n\nTest async JavaScript code, it should delay to render a red.\n\n```js | dom\n(async () => {\n  const text = await new Promise((resolve) =>\n    setTimeout(() => resolve(\"hello\"), 3000)\n  );\n  const div = document.createElement(\"div\");\n  div.innerText = \"hello\";\n  div.style.background = \"red\";\n  return div;\n})();\n```\n\nTest other language with dom markup: 'py | dom', it should only render a static codeblock.\n\n```py\nprint('hello world')\n```\n\nTest JavaScript code with pin options: `js | dom \"pin: false\"`, it should not render a codeblock.\n\n```js | dom \"pin: false\"\n(() => {\n  const div = document.createElement(\"div\");\n  div.innerText = \"hello\";\n  div.style.background = \"red\";\n  return div;\n})();\n```\n\nTest JavaScript code returns a array: `[DOM, clearCallback]`, it should call clearCallback after unmounted.\n\n```js | dom\n(() => {\n  const div = document.createElement(\"div\");\n  div.innerText = \"1\";\n  div.style.background = \"#28DF99\";\n  div.style.height = \"150px\";\n  div.style.lineHeight = \"150px\";\n  div.style.fontSize = \"100px\";\n  div.style.color = \"white\";\n  div.style.textAlign = \"center\";\n  const timer = setInterval(() => {\n    const number = +div.innerText;\n    div.innerText = number + 1;\n  }, 1000);\n  return [div, () => clearInterval(timer)];\n})();\n```\n\nTest JavaScript throws a error, it should render a error output.\n\n```js | dom\n(() => {\n  const div = document.createElement(\"div\");\n  div.innerText = text;\n  return div;\n})();\n```\n\n## Test Advanced Usage\n\nTest using third-party library.\n\n```js | dom\nsp.plot({\n  data: [\n    { genre: \"Sports\", sold: 275 },\n    { genre: \"Strategy\", sold: 115 },\n    { genre: \"Action\", sold: 120 },\n    { genre: \"Shooter\", sold: 350 },\n    { genre: \"Other\", sold: 150 },\n  ],\n  element: \"interval\",\n  encode: [\n    { channel: \"x\", field: \"genre\" },\n    { channel: \"y\", field: \"sold\" },\n    { channel: \"fill\", field: \"genre\" },\n  ],\n});\n```\n\n## Test Markdown\n\n> test quote\n\n- Test li\n- Test li\n  - Test li\n  - Test li\n- Test li\n\nThis is a **test** paragraph for [_markdown-it_](https://github.com/markdown-it/markdown-it).\n\nTest jump between notebooks: [Name with line](#/name-with-line.md).\n\nTest static assets.\n\n![](../assets/introduction/logo.png)\n"}